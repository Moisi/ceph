// authorizer.v1.AuthorizerService
//
// The Authorization Handoff protocol definition.
//

syntax = "proto3";

package authorizer.v1;

import "google/protobuf/timestamp.proto";

option go_package = "bits.linode.com/LinodeApi/obj-endpoint/gen/proto/authorizer/v1";

service AuthorizerService
{
  // Ping allows us to (a) check and test the connection to the authorizer,
  // and (b) easily avoid the lazy initialization behaviour of the gRPC
  // channel, so we can give helpful error messages at startup.
  rpc Ping(PingRequest) returns (PingResponse);

  // A request for authorization. Provide easily-available information about
  // the request such as user, bucket and object key, so that the Authorizer
  // can work out what additional data it will need to make a proper
  // decision. Failures here will result in the user getting an error
  // message. An Allow or Deny code means the protocol is ended. An 'extra
  // data required' code means the client should either fail authorization
  // or submit another Authorize() request with the required data.
  //
  rpc Authorize(AuthorizeRequest) returns (AuthorizeResponse);
}

// Common fields for all messages.
message AuthorizationCommon
{
  // This may be used for debugging and performance analysis.
  google.protobuf.Timestamp timestamp = 1;
  // The unique identifier for this request. This must be present in all
  // requests and responses. It is generated for the AuthorizeRequest
  // must match in any responses.
  string authorization_id = 2;
}

message PingRequest
{
  AuthorizationCommon common = 1;
}

message PingResponse
{
  AuthorizationCommon common = 1;
}

//
// Utility messages and enums.
//

enum AuthorizationResultCode {
  AUTHZ_RESULT_UNSPECIFIED = 0;
  // Proceed with the request, which is now authorized.
  AUTHZ_RESULT_ALLOW = 1;
  // Refuse the request and stop further processing.
  AUTHZ_RESULT_DENY = 2;
  // This value means that the Authorizer needs more data from Ceph to
  // authorize. The client must either provide those data or fail the
  // authorization entirely.
  AUTHZ_RESULT_EXTRA_DATA_REQUIRED = 3;
  // An internal error occurred. This should be logged and investigated.
  AUTHZ_RESULT_INTERNAL_ERROR = 4;
  // We have exceeded a rate limit on the Authorizer.
  AUTHZ_RESULT_RATE_LIMIT_EXCEEDED = 5;
  // XXX this will almost certainly need extended.
}

message AuthorizationResult
{
  // A human-readable error message that will appear in the logs.
  string error_message = 1;
  // A more detailed error message that will appear in the logs, possibly
  // only at higher debug levels than the error_message field.
  string error_detail = 2;
  // An unambiguous error code that will be mapped to internal RGW error
  // types, as defined in src/rgw/rgw_common.cc as rgw_http_s3_errors and
  // possibly new Akamai-specific values.
  AuthorizationResultCode code = 3;
}

// Each S3 Opcode as seen by RGW.
//
// These numbers are not arbitrary. They're the values found in
// src/rgw/rgw_iam_policy.h, and are constexpr uint64_t values that look like
// rgw::IAM::s3GetObject, mangled to fit protobuf. Since protobuf expects the
// zero value to be <PREFIX_>_UNSPECIFIED but the opcodes in the RGW source
// start at zero, we've shifted the values up by one. This is a shame.
// Nonetheless, we can still easily translate the RGW code number to the
// protobuf enum by adding one.
//
enum S3Opcode {
  S3_OPCODE_UNSPECIFIED = 0;
  S3_OPCODE_GET_OBJECT = 1;
  S3_OPCODE_GET_OBJECT_VERSION = 2;
  S3_OPCODE_PUT_OBJECT = 3;
  S3_OPCODE_GET_OBJECT_ACL = 4;
  S3_OPCODE_GET_OBJECT_VERSION_ACL = 5;
  S3_OPCODE_PUT_OBJECT_ACL = 6;
  S3_OPCODE_PUT_OBJECT_VERSION_ACL = 7;
  S3_OPCODE_DELETE_OBJECT = 8;
  S3_OPCODE_DELETE_OBJECT_VERSION = 9;
  S3_OPCODE_LIST_MULTIPART_UPLOAD_PARTS = 10;
  S3_OPCODE_ABORT_MULTIPART_UPLOAD = 11;
  S3_OPCODE_GET_OBJECT_TORRENT = 12;
  S3_OPCODE_GET_OBJECT_VERSION_TORRENT = 13;
  S3_OPCODE_RESTORE_OBJECT = 14;
  S3_OPCODE_CREATE_BUCKET = 15;
  S3_OPCODE_DELETE_BUCKET = 16;
  S3_OPCODE_LIST_BUCKET = 17;
  S3_OPCODE_LIST_BUCKET_VERSIONS = 18;
  S3_OPCODE_LIST_ALL_MY_BUCKETS = 19;
  S3_OPCODE_LIST_BUCKET_MULTIPART_UPLOADS = 20;
  S3_OPCODE_GET_ACCELERATE_CONFIGURATION = 21;
  S3_OPCODE_PUT_ACCELERATE_CONFIGURATION = 22;
  S3_OPCODE_GET_BUCKET_ACL = 23;
  S3_OPCODE_PUT_BUCKET_ACL = 24;
  S3_OPCODE_GET_BUCKET_CORS = 25;
  S3_OPCODE_PUT_BUCKET_CORS = 26;
  S3_OPCODE_GET_BUCKET_VERSIONING = 27;
  S3_OPCODE_PUT_BUCKET_VERSIONING = 28;
  S3_OPCODE_GET_BUCKET_REQUEST_PAYMENT = 29;
  S3_OPCODE_PUT_BUCKET_REQUEST_PAYMENT = 30;
  S3_OPCODE_GET_BUCKET_LOCATION = 31;
  S3_OPCODE_GET_BUCKET_POLICY = 32;
  S3_OPCODE_DELETE_BUCKET_POLICY = 33;
  S3_OPCODE_PUT_BUCKET_POLICY = 34;
  S3_OPCODE_GET_BUCKET_NOTIFICATION = 35;
  S3_OPCODE_PUT_BUCKET_NOTIFICATION = 36;
  S3_OPCODE_GET_BUCKET_LOGGING = 37;
  S3_OPCODE_PUT_BUCKET_LOGGING = 38;
  S3_OPCODE_GET_BUCKET_TAGGING = 39;
  S3_OPCODE_PUT_BUCKET_TAGGING = 40;
  S3_OPCODE_GET_BUCKET_WEBSITE = 41;
  S3_OPCODE_PUT_BUCKET_WEBSITE = 42;
  S3_OPCODE_DELETE_BUCKET_WEBSITE = 43;
  S3_OPCODE_GET_LIFECYCLE_CONFIGURATION = 44;
  S3_OPCODE_PUT_LIFECYCLE_CONFIGURATION = 45;
  S3_OPCODE_PUT_REPLICATION_CONFIGURATION = 46;
  S3_OPCODE_GET_REPLICATION_CONFIGURATION = 47;
  S3_OPCODE_DELETE_REPLICATION_CONFIGURATION = 48;
  S3_OPCODE_GET_OBJECT_TAGGING = 49;
  S3_OPCODE_PUT_OBJECT_TAGGING = 50;
  S3_OPCODE_DELETE_OBJECT_TAGGING = 51;
  S3_OPCODE_GET_OBJECT_VERSION_TAGGING = 52;
  S3_OPCODE_PUT_OBJECT_VERSION_TAGGING = 53;
  S3_OPCODE_DELETE_OBJECT_VERSION_TAGGING = 54;
  S3_OPCODE_PUT_BUCKET_OBJECT_LOCK_CONFIGURATION = 55;
  S3_OPCODE_GET_BUCKET_OBJECT_LOCK_CONFIGURATION = 56;
  S3_OPCODE_PUT_OBJECT_RETENTION = 57;
  S3_OPCODE_GET_OBJECT_RETENTION = 58;
  S3_OPCODE_PUT_OBJECT_LEGAL_HOLD = 59;
  S3_OPCODE_GET_OBJECT_LEGAL_HOLD = 60;
  S3_OPCODE_BYPASS_GOVERNANCE_RETENTION = 61;
  S3_OPCODE_GET_BUCKET_POLICY_STATUS = 62;
  S3_OPCODE_PUT_PUBLIC_ACCESS_BLOCK = 63;
  S3_OPCODE_GET_PUBLIC_ACCESS_BLOCK = 64;
  S3_OPCODE_DELETE_PUBLIC_ACCESS_BLOCK = 65;
  S3_OPCODE_GET_BUCKET_PUBLIC_ACCESS_BLOCK = 66;
  S3_OPCODE_PUT_BUCKET_PUBLIC_ACCESS_BLOCK = 67;
  S3_OPCODE_DELETE_BUCKET_PUBLIC_ACCESS_BLOCK = 68;
  S3_OPCODE_GET_BUCKET_ENCRYPTION = 69;
  S3_OPCODE_PUT_BUCKET_ENCRYPTION = 70;
}

// Extra Data: Information that RGW may optionally need to provide in order to
// properly authorize the request. We don't unconditionally fetch everything
// for performance reasons.

// AuthorizeRequest may return a list of ExtraDataRequirements. It's down to
// the authz client to provide these items, or terminate the authorization
// attempt.
message ExtraDataRequirement
{
  bool bucket_tags = 1;
  bool object_key_tags = 2;
}

message ExtraData
{
  // The tags that were present on the bucket at the time of the request.
  map<string, string> bucket_tags = 1;
  // The tags that were present on the object key at the time of the
  // request.
  map<string, string> object_key_tags = 2;
}

//
// Authorize(). If enough information is provided, the Authorizer can return
// Allow or Deny and we're done. Otherwise the Authorizer can return a request
// for extra data, which the client then provides in another Authorize() call.
//

message AuthorizeRequest
{
  AuthorizationCommon common = 1;
  // The canonical user ID is returned by the Authenticator and is reflected
  // back to the Authorizer verbatim.
  string canonical_user_id = 9;
  // user_arn is returned by the Authenticator and is reflected back
  // to the Authorizer verbatim.
  string user_arn = 2;
  // assuming_user_arn is returned by the Authenticator and is reflected
  // back to the Authorizer verbatim.
  optional string assuming_user_arn = 3;
  // account_arn is returned by the Authenticator and is reflected back to
  // the Authorizer verbatim.
  string account_arn = 4;
  // The S3 operation.
  S3Opcode opcode = 5;
  // The S3 bucket name. May be empty.
  string bucket_name = 6;
  // The S3 object key name. May be empty.
  string object_key_name = 7;
  // The authorization 'environment', a list of key-value pairs with
  // authorization parameters. E.g. 's3:prefix' => '/path'.
  map<string, string> environment = 10;
  // Extra data that the Authorizer may require in order to make a decision.
  // This can either be added unilaterally by the client, or specifically
  // requested by the Authorizer in the AuthorizeResponse.
  optional ExtraData extra_data = 8;
}

message AuthorizeResponse
{
  AuthorizationCommon common = 1;
  AuthorizationResult result = 2;
  optional ExtraDataRequirement extra_data_required = 3;
}
